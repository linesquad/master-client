/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/profile': typeof AuthenticatedProfileRoute
}
export interface FileRoutesByTo {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof appIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/(app)/': typeof appIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/register' | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/register' | '/profile' | '/'
  id:
    | '__root__'
    | '/(app)'
    | '/_authenticated'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/_authenticated/profile'
    | '/(app)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

declare module './routes/(app)/route' {
  const createFileRoute: CreateFileRoute<
    '/(app)',
    FileRoutesByPath['/(app)']['parentRoute'],
    FileRoutesByPath['/(app)']['id'],
    FileRoutesByPath['/(app)']['path'],
    FileRoutesByPath['/(app)']['fullPath']
  >
}
declare module './routes/_authenticated' {
  const createFileRoute: CreateFileRoute<
    '/_authenticated',
    FileRoutesByPath['/_authenticated']['parentRoute'],
    FileRoutesByPath['/_authenticated']['id'],
    FileRoutesByPath['/_authenticated']['path'],
    FileRoutesByPath['/_authenticated']['fullPath']
  >
}
declare module './routes/(auth)/login' {
  const createFileRoute: CreateFileRoute<
    '/(auth)/login',
    FileRoutesByPath['/(auth)/login']['parentRoute'],
    FileRoutesByPath['/(auth)/login']['id'],
    FileRoutesByPath['/(auth)/login']['path'],
    FileRoutesByPath['/(auth)/login']['fullPath']
  >
}
declare module './routes/(auth)/register' {
  const createFileRoute: CreateFileRoute<
    '/(auth)/register',
    FileRoutesByPath['/(auth)/register']['parentRoute'],
    FileRoutesByPath['/(auth)/register']['id'],
    FileRoutesByPath['/(auth)/register']['path'],
    FileRoutesByPath['/(auth)/register']['fullPath']
  >
}
declare module './routes/_authenticated/profile' {
  const createFileRoute: CreateFileRoute<
    '/_authenticated/profile',
    FileRoutesByPath['/_authenticated/profile']['parentRoute'],
    FileRoutesByPath['/_authenticated/profile']['id'],
    FileRoutesByPath['/_authenticated/profile']['path'],
    FileRoutesByPath['/_authenticated/profile']['fullPath']
  >
}
declare module './routes/(app)/index' {
  const createFileRoute: CreateFileRoute<
    '/(app)/',
    FileRoutesByPath['/(app)/']['parentRoute'],
    FileRoutesByPath['/(app)/']['id'],
    FileRoutesByPath['/(app)/']['path'],
    FileRoutesByPath['/(app)/']['fullPath']
  >
}

interface appRouteRouteChildren {
  appIndexRoute: typeof appIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appIndexRoute: appIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
